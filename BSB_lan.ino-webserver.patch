--- BSB_lan.ino.orig    2020-01-24 10:06:29.245574174 +0300
+++ BSB_lan.ino 2020-01-24 13:07:17.454023915 +0300
@@ -462,7 +462,7 @@
 // char _ipstr[20];    // addr in format xxx.yyy.zzz.aaa
 // byte __remoteIP[4] = {0,0,0,0};   // IP address in bin format

-#ifdef LOGGER
+#if defined LOGGER || defined WEBSERVER
 #if defined(__SAM3X8E__)
   #include <SD.h>
 #else
@@ -4581,7 +4581,7 @@
               case 0x66: msg_cycle = 19; break;
               case 0x7C: msg_cycle = 20; break;
               default:
-                 DebugOutput.print("Unknown request: ");
+                 DebugOutput.print(F("Unknown request: "));
                 for (int c=0;c<9;c++) {
                   if (msg[c]<16) DebugOutput.print("0");
                   DebugOutput.print(msg[c], HEX);
@@ -4725,7 +4725,7 @@
                   break;
                 case 0x00: break;
                 default:
-                  DebugOutput.print("Unknown telegram: ");
+                  DebugOutput.print(F("Unknown telegram: "));
                   for (int c=0;c<9+pps_offset;c++) {
                     if (msg[c]<16) DebugOutput.print("0");
                     DebugOutput.print(msg[c], HEX);
@@ -4826,12 +4826,16 @@
         }
         // Got an EOL character
         DebugOutput.println();
-        // perform HTTP-Authentification by reading the remaining client data and look for credentials
-#ifdef USER_PASS_B64

+        // perform HTTP-Authentification by reading the remaining client data and look for credentials
+        // Parsing headers
         char linebuf[80];
         uint8_t charcount=0;
-        boolean authenticated=false;
+        uint8_t httpflags = 0; //bit 0 - authenticated: 0 - no, 1 - yes
+                               //bit 1 - client browser accept gzip: 0 - no, 2 - yes
+                               //bit 2 - HEAD request received from client: 0 - no, 4 - yes
+                               //...
+                               //bit 7 - send HTML fragment only, without header and footer. For external webserver. 0 - full HTML, 128 - fragment
         memset(linebuf,0,sizeof(linebuf));
         boolean currentLineIsBlank = false;
         while (client.connected()) {
@@ -4845,9 +4849,21 @@
             if (c == '\n') {
               // you're starting a new line
               currentLineIsBlank = true;
-              if (strstr(linebuf,"Authorization: Basic")!=0 && strstr(linebuf,USER_PASS_B64)!=0) {
-                authenticated=true;
+#ifdef WEBSERVER
+              //Execute only if flag not set because strstr more expensive than bitwise operation
+              if (httpflags ^ 2 && strstr(linebuf,"Accept-encoding") != 0 && strstr(linebuf+16, "gzip") != 0) {
+                httpflags |= 2;
               }
+#ifdef USER_PASS_B64
+             else
+#endif
+#endif
+#ifdef USER_PASS_B64
+              //Execute only if flag not set because strstr more expensive than bitwise operation
+              if (httpflags ^ 1 && strstr(linebuf,"Authorization: Basic")!=0 && strstr(linebuf,USER_PASS_B64)!=0) {
+                httpflags |= 1;
+              }
+#endif
               memset(linebuf,0,sizeof(linebuf));
               charcount=0;
             } else if (c != '\r') {
@@ -4856,8 +4872,9 @@
             }
           }
         }
+#ifdef USER_PASS_B64
         // if no credentials found in HTTP header, send 401 Authorization Required
-        if (!authenticated) {
+        if (httpflags ^ 1) {
           client.println(F("HTTP/1.1 401 Authorization Required"));
           client.println(F("WWW-Authenticate: Basic realm=\"Secure Area\""));
           client.println(F("Content-Type: text/html"));
@@ -4870,12 +4887,15 @@
         }
         // otherwise continue like normal
 #endif
-
         // Flush any remaining bytes from the client buffer
 //        client.flush();
         // GET / HTTP/1.1 (anforderung website)
         // GET /710 HTTP/1.0 (befehlseingabe)
         String urlString = String(cLineBuffer);
+#ifdef WEBSERVER
+        // Check for HEAD request (for file caching)
+        if (urlString.substring(0, urlString.indexOf('/')).indexOf("HEAD") != -1 ) httpflags |= 4;
+#endif
         urlString = urlString.substring(urlString.indexOf('/'), urlString.indexOf(' ', urlString.indexOf('/')));
         DebugOutput.println(urlString);
         urlString.toCharArray(cLineBuffer, MaxArrayElement);
@@ -4920,21 +4940,161 @@
         }
         *p='/';
 #endif
+
+#ifdef WEBSERVER
+        if(!strcmp(p,"/")){
+          urlString = F("index.html");
+        }
+        else
+          urlString = String(p + 1);
+        DebugOutput.println("URL: " + urlString);
+        int mimetype = 0; //unknown MIME type
+        if (urlString.endsWith(F(".html")) || urlString.endsWith(F(".htm"))) mimetype = 1;
+        else if(urlString.endsWith(F(".css"))) mimetype = 2;
+        else if(urlString.endsWith(F(".js"))) mimetype = 3;
+        else if(urlString.endsWith(F(".xml"))) mimetype = 4;
+        else if(urlString.endsWith(F(".txt"))) mimetype = 5;
+        else if(urlString.endsWith(F(".jpg"))) mimetype = 101;
+        else if(urlString.endsWith(F(".gif"))) mimetype = 102;
+        else if(urlString.endsWith(F(".svg"))) mimetype = 103;
+        else if(urlString.endsWith(F(".png"))) mimetype = 104;
+        else if(urlString.endsWith(F(".gz"))) mimetype = 201;
+        // You can add more MIME types here
+
+        if(mimetype)  {
+          File dataFile;
+          // client browser accept gzip
+          if (httpflags & 2) dataFile = SD.open(urlString + ".gz");
+          if (!dataFile) {
+            // reuse httpflags
+            bitClear(httpflags, 1); //can't use gzip because no gzipped file
+            dataFile = SD.open(urlString);
+          }
+          // if the file is available, read from it:
+          if (dataFile) {
+            DebugOutput.print(F("file opened from SD: ")); DebugOutput.println(urlString);
+            client.print(F("HTTP/1.1 200 OK\nContent-Type: "));
+            switch(mimetype){
+              case 1: client.println(F("text/html")); break;
+              case 2: client.println(F("text/css")); break;
+              case 3: client.println(F("application/x-javascript")); break;
+              case 4: client.println(F("application/xml")); break;
+              // case 5 below
+              case 101: client.println(F("image/jpeg")); break;
+              case 102: client.println(F("image/gif")); break;
+              case 103: client.println(F("image/svg")); break;
+              case 104: client.println(F("image/png")); break;
+              case 201: client.println(F("application/x-gzip")); break;
+              case 5:
+              default: client.println(F("text"));
+            }
+
+            client.print(F("Content-Length: ")); client.println(dataFile.size());
+            client.println(F("Cache-Control: max-age=84400, must-revalidate"));
+            if(httpflags & 2) client.println(F("Content-Encoding: gzip"));
+            dir_t d;
+            if (dataFile.dirEntry(&d)) {
+              String monthname;
+              String downame;
+              char outBuffer[50];
+              downame = F("Last-Modified: %s, %02d %s %d %02d:%02d:%02d GMT");
+              uint8_t len = downame.length() + 1;
+              char outBufferFormat[len];
+              downame.toCharArray(outBufferFormat, len);
+              uint16_t lastWrtYr =  (FAT_YEAR(d.lastWriteDate));
+              byte monthval = FAT_MONTH(d.lastWriteDate);
+              byte dayval = FAT_DAY(d.lastWriteDate);
+              switch (dayofweek((uint8_t)dayval, (uint8_t)monthval, lastWrtYr))
+              {
+                case 1: downame = F("Mon"); break;
+                case 2: downame = F("Tue"); break;
+                case 3: downame = F("Wed"); break;
+                case 4: downame = F("Thu"); break;
+                case 5: downame = F("Fri"); break;
+                case 6: downame = F("Sat"); break;
+                case 7: downame = F("Sun"); break;
+                default: downame = F("ERR"); break;
+              }
+
+              switch (monthval)
+              {
+                case 1: monthname = F("Jan"); break;
+                case 2: monthname = F("Feb"); break;
+                case 3: monthname = F("Mar"); break;
+                case 4: monthname = F("Apr"); break;
+                case 5: monthname = F("May"); break;
+                case 6: monthname = F("Jun"); break;
+                case 7: monthname = F("Jul"); break;
+                case 8: monthname = F("Aug"); break;
+                case 9: monthname = F("Sep"); break;
+                case 10: monthname = F("Oct"); break;
+                case 11: monthname = F("Nov"); break;
+                case 12: monthname = F("Dec"); break;
+                default: monthname = F("ERR"); break;
+              }
+            sprintf(outBuffer, outBufferFormat, downame, dayval, monthname, lastWrtYr, FAT_HOUR(d.lastWriteTime), FAT_MINUTE(d.lastWriteTime), FAT_SECOND(d.lastWriteTime));
+            client.println(outBuffer);
+            }
+
+            client.println();
+            //HEAD request received
+            if (httpflags ^ 4) {
+              int logbuflen = 512;
+              byte loglineBuf[logbuflen];
+              int chars_read = dataFile.read(&loglineBuf , logbuflen);
+              while (chars_read == logbuflen) {
+                client.write(loglineBuf, logbuflen);
+                chars_read = dataFile.read(&loglineBuf , logbuflen);
+              }
+              if (chars_read > 0) client.write(loglineBuf, chars_read);
+            }
+
+            DebugOutput.println((httpflags |= 4)?(String)F("HEAD"):(String)F("GET") + F(" request received"));
+
+            dataFile.close();
+          }
+          else
+          {
+          // simply print the website if no index.html on SD card
+            if(!strcmp(p,"/")){
+              webPrintSite();
+              break;
+            }
+            client.print(F("HTTP/1.1 404 Not Found\nContent-Type: text/html\n\n<h2>File not found!</h2><br>File name: "));
+            client.println(urlString);
+
+          }
+          client.flush();
+          break;
+        }
+#endif
+
         if (p[1] != 'J') {
           client.flush();
         }
+#ifndef WEBSERVER
         // simply print the website
         if(!strcmp(p,"/")){
           webPrintSite();
           break;
         }
+#endif

         // Answer to unknown requests
-        if(!isdigit(p[1]) && strchr("ABCDEGHIJKLMNOPQRSTUVXY",p[1])==NULL){
+        if(!isdigit(p[1]) && strchr("ABCDEGHIJKLMNOPQRSTUVWXY",p[1])==NULL){
           webPrintHeader();
           webPrintFooter();
           break;
         }
+
+#ifdef WEBSERVER
+        //Send HTML pages without header and footer (For external interface)
+        if(p[1]=='W'){
+          p++;
+          httpflags |= 128;
+        }
+#endif
+
         // setting verbosity level
         if(p[1]=='V'){
           p+=2;
@@ -5171,7 +5331,7 @@
         }

         if(p[1]=='Q') {
-          webPrintHeader();
+          if(httpflags ^ 128) webPrintHeader();

           client.print(F(MENU_TEXT_VER ": "));
           client.print(BSB_VERSION);
@@ -5352,7 +5512,7 @@

           client.println(F("<BR>" MENU_TEXT_QFE ".<BR>"));
           bus.setBusType(bus.getBusType(), myAddr, destAddr);   // return to original destination address
-          webPrintFooter();
+          if(httpflags ^ 128) webPrintFooter();
           break;
         }

@@ -5717,6 +5877,7 @@
               client.println(F(MENU_TEXT_DTF));
             }
             webPrintFooter();
+#if !defined WEBSERVER && !defined USEEXTERNALINTERFACE
           } else if (p[2]=='G') {
             webPrintHeader();
             client.println(F("<A HREF='D'>" MENU_TEXT_DTD "</A><div align=center></div>"));
@@ -5754,12 +5915,13 @@
             } else {
               client.println(F(MENU_TEXT_DTO));
             }
+#endif
           }
           break;
         }
 #endif
         if (p[1]=='C'){ // dump configuration
-          webPrintHeader();
+          if(httpflags ^ 128) webPrintHeader();
           client.println(F(MENU_TEXT_CFG "<BR><BR>"));
 //          client.println(F("BSB pins: "));
 //          client.println(bus);
@@ -5924,7 +6086,7 @@
           #endif

           client.println(F("<BR>"));
-          webPrintFooter();
+          if(httpflags ^ 128) webPrintFooter();

 #if defined(__AVR__)
           DebugOutput.println(F("EEPROM dump:"));
@@ -7016,7 +7178,7 @@
     }
   }

-#ifdef LOGGER
+#if defined LOGGER || defined WEBSERVER
   // disable w5100 while setting up SD
   pinMode(10,OUTPUT);
   digitalWrite(10,HIGH);
