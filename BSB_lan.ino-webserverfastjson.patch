--- BSB_lan.ino 2020-02-09 00:27:11.460917779 +0300
+++ BSB_lan.ino.new     2020-02-09 00:35:55.452939502 +0300
@@ -462,7 +462,7 @@
 // char _ipstr[20];    // addr in format xxx.yyy.zzz.aaa
 // byte __remoteIP[4] = {0,0,0,0};   // IP address in bin format

-#ifdef LOGGER
+#if defined LOGGER || defined WEBSERVER
 #if defined(__SAM3X8E__)
   #include <SD.h>
 #else
@@ -4187,6 +4196,62 @@
   return log_parameter;
 }

+/** *****************************************************************
+ *  Function: transmitFile
+ *  Does: transmit file from SD card to network client
+ *  Pass parameters:
+ *  File dataFile - opened file
+ * Parameters passed back:
+ *   none
+ * Function value returned:
+ *   none
+ * Global resources used:
+ *   client instance
+ * *************************************************************** */
+void transmitFile(File dataFile) {
+  int logbuflen = 512;
+  byte loglineBuf[logbuflen];
+  int chars_read = dataFile.read(&loglineBuf , logbuflen);
+  while (chars_read == logbuflen) {
+    client.write(loglineBuf, logbuflen);
+    chars_read = dataFile.read(&loglineBuf , logbuflen);
+    }
+  if (chars_read > 0) client.write(loglineBuf, chars_read);
+}
+
+/** *****************************************************************
+ *  Function: bufferedprint and bufferedprintln
+ *  Does: do buffered print to network client. Increasing net perfomance 2~50 times
+ *  Pass parameters:
+ *  WiFiEspClient/EthernetClient &cl
+ *  PGM_P outstr
+ * Parameters passed back:
+ *   none
+ * Function value returned:
+ *   none
+ * Global resources used:
+ *   buffer variable
+ * *************************************************************** */
+
+#ifdef WIFI
+void bufferedprint(WiFiEspClient& cl, PGM_P outstr){
+#else
+void bufferedprint(EthernetClient& cl, PGM_P outstr){
+#endif
+  strncpy_P(buffer, outstr, BUFLEN);
+  buffer[BUFLEN - 1] = 0;
+  cl.print(buffer);
+}
+#ifdef WIFI
+void bufferedprintln(WiFiEspClient& cl, PGM_P outstr){
+#else
+void bufferedprintln(EthernetClient& cl, PGM_P outstr){
+#endif
+  strncpy_P(buffer, outstr, BUFLEN - 2);
+  strcat_P(buffer, PSTR("\n"));
+  buffer[BUFLEN - 1] = 0;
+  cl.print(buffer);
+}

 /** *****************************************************************
  *  Function:
@@ -4862,29 +4927,45 @@
         }
         // Got an EOL character
         DebugOutput.println();
-        // perform HTTP-Authentification by reading the remaining client data and look for credentials
-#ifdef USER_PASS_B64

-        char linebuf[80];
+        // perform HTTP-Authentification by reading the remaining client data and look for credentials
+        // Parsing headers
+        //char linebuf[80]; i have 'buffer' variable. I will use 'buffer' instead 'linebuf'
         uint8_t charcount=0;
-        boolean authenticated=false;
-        memset(linebuf,0,sizeof(linebuf));
+        uint8_t httpflags = 0; //bit 0 - authenticated: 0 - no, 1 - yes
+                               //bit 1 - client browser accept gzip: 0 - no, 2 - yes
+                               //bit 2 - HEAD request received from client: 0 - no, 4 - yes
+                               //...
+                               //bit 7 - send HTML fragment only, without header and footer. For external webserver. 0 - full HTML, 128 - fragment
+        memset(buffer,0,sizeof(buffer));
         boolean currentLineIsBlank = false;
         while (client.connected()) {
           if (client.available()) {
             char c = client.read();
-            linebuf[charcount]=c;
-            if (charcount<sizeof(linebuf)-1) charcount++;
+            buffer[charcount]=c;
+            if (charcount<sizeof(buffer)-1) charcount++;
             if (c == '\n' && currentLineIsBlank) {
               break;
             }
             if (c == '\n') {
               // you're starting a new line
               currentLineIsBlank = true;
-              if (strstr(linebuf,"Authorization: Basic")!=0 && strstr(linebuf,USER_PASS_B64)!=0) {
-                authenticated=true;
+#ifdef WEBSERVER
+              //Execute only if flag not set because strstr more expensive than bitwise operation
+              if (!(httpflags & 2) && strstr_P(buffer,PSTR("Accept-Encoding")) != 0 && strstr_P(buffer+16, PSTR("gzip")) != 0) {
+                httpflags |= 2;
               }
-              memset(linebuf,0,sizeof(linebuf));
+#ifdef USER_PASS_B64
+             else
+#endif
+#endif
+#ifdef USER_PASS_B64
+              //Execute only if flag not set because strstr more expensive than bitwise operation
+              if (!(httpflags & 1) && strstr_P(buffer,PSTR("Authorization: Basic"))!=0 && strstr(buffer,USER_PASS_B64)!=0) {
+                httpflags |= 1;
+              }
+#endif
+              memset(buffer,0, charcount);
               charcount=0;
             } else if (c != '\r') {
               // you've gotten a character on the current line
@@ -4892,8 +4973,9 @@
             }
           }
         }
+#ifdef USER_PASS_B64
         // if no credentials found in HTTP header, send 401 Authorization Required
-        if (!authenticated) {
+        if (!(httpflags & 1)) {
           client.println(F("HTTP/1.1 401 Authorization Required"));
           client.println(F("WWW-Authenticate: Basic realm=\"Secure Area\""));
           client.println(F("Content-Type: text/html"));
@@ -4906,12 +4988,15 @@
         }
         // otherwise continue like normal
 #endif
-
         // Flush any remaining bytes from the client buffer
 //        client.flush();
         // GET / HTTP/1.1 (anforderung website)
         // GET /710 HTTP/1.0 (befehlseingabe)
         String urlString = String(cLineBuffer);
+#ifdef WEBSERVER
+        // Check for HEAD request (for file caching)
+        if (urlString.substring(0, urlString.indexOf('/')).indexOf("HEAD") != -1 ) httpflags |= 4;
+#endif
         urlString = urlString.substring(urlString.indexOf('/'), urlString.indexOf(' ', urlString.indexOf('/')));
         DebugOutput.println(urlString);
         urlString.toCharArray(cLineBuffer, MaxArrayElement);
@@ -4927,14 +5012,22 @@
 // IPWE END

         if (urlString == "/favicon.ico") {
-          client.println(F("HTTP/1.1 200 OK"));
-          client.println(F("Content-Type: image/x-icon"));
-          client.println();
+//          strcpy_P(buffer, PSTR("HTTP/1.1 200 OK\nContent-Type: image/x-icon\n\n"));
+//          client.print(buffer);
+          bufferedprint(client, PSTR("HTTP/1.1 200 OK\nContent-Type: image/x-icon\n\n"));
+#ifdef WEBSERVER
+          File dataFile = SD.open(urlString + 1);
+          if (dataFile) {
+            transmitFile(dataFile);
+            dataFile.close();
+            } else {
 #if defined(__SAM3X8E__)
           printPStr(favicon, sizeof(favicon));
 #else
           printPStr(pgm_get_far_address(favicon), sizeof(favicon));
 #endif
+            }
+#endif
           break;
         }

@@ -4956,21 +5049,157 @@
         }
         *p='/';
 #endif
+
+#ifdef WEBSERVER
+        if(!strcmp(p,"/")){
+          urlString = F("index.html");
+        }
+        else
+          urlString = String(p + 1);
+        DebugOutput.println("URL: " + urlString);
+        int mimetype = 0; //unknown MIME type
+        if (urlString.endsWith(F(".html")) || urlString.endsWith(F(".htm"))) mimetype = 1;
+        else if(urlString.endsWith(F(".css"))) mimetype = 2;
+        else if(urlString.endsWith(F(".js"))) mimetype = 3;
+        else if(urlString.endsWith(F(".xml"))) mimetype = 4;
+        else if(urlString.endsWith(F(".txt"))) mimetype = 5;
+        else if(urlString.endsWith(F(".jpg"))) mimetype = 101;
+        else if(urlString.endsWith(F(".gif"))) mimetype = 102;
+        else if(urlString.endsWith(F(".svg"))) mimetype = 103;
+        else if(urlString.endsWith(F(".png"))) mimetype = 104;
+        else if(urlString.endsWith(F(".ico"))) mimetype = 105;
+        else if(urlString.endsWith(F(".gz"))) mimetype = 201;
+        // You can add more MIME types here
+
+        if(mimetype)  {
+          File dataFile;
+          const char *getfarstrings;
+
+          // client browser accept gzip
+          if ((httpflags & 2)) dataFile = SD.open(urlString + ".gz");
+          if (!dataFile) {
+            // reuse httpflags
+            bitClear(httpflags, 1); //can't use gzip because no gzipped file
+            dataFile = SD.open(urlString);
+          }
+          // if the file is available, read from it:
+          if (dataFile) {
+            DebugOutput.print(F("File opened from SD: ")); DebugOutput.println(urlString);
+            strcpy_P(buffer, PSTR("HTTP/1.1 200 OK\nContent-Type: "));
+            switch(mimetype){
+              case 1: getfarstrings = PSTR("text/html"); break;
+              case 2: getfarstrings = PSTR("text/css"); break;
+              case 3: getfarstrings = PSTR("application/x-javascript"); break;
+              case 4: getfarstrings = PSTR("application/xml"); break;
+              // case 5 below
+              case 101: getfarstrings = PSTR("image/jpeg"); break;
+              case 102: getfarstrings = PSTR("image/gif"); break;
+              case 103: getfarstrings = PSTR("image/svg"); break;
+              case 104: getfarstrings = PSTR("image/png"); break;
+              case 105: getfarstrings = PSTR("image/x-icon"); break;
+              case 201: getfarstrings = PSTR("application/x-gzip"); break;
+              case 5:
+              default: getfarstrings = PSTR("text");
+            }
+            strcat_P(buffer, getfarstrings);
+            strcpy_P(outBuf, PSTR("\nContent-Length: %d\n"));
+            sprintf(buffer + strlen(buffer), outBuf, dataFile.size());
+            if((httpflags & 2)) strcat_P(buffer, PSTR("Content-Encoding: gzip\n"));
+            dir_t d;
+            if (dataFile.dirEntry(&d)) {
+              char monthname[4];
+              char downame[4];
+              uint16_t lastWrtYr =  (FAT_YEAR(d.lastWriteDate));
+              byte monthval = FAT_MONTH(d.lastWriteDate);
+              byte dayval = FAT_DAY(d.lastWriteDate);
+              switch (dayofweek((uint8_t)dayval, (uint8_t)monthval, lastWrtYr))
+              {
+                case 1: getfarstrings = PSTR("Mon"); break;
+                case 2: getfarstrings = PSTR("Tue"); break;
+                case 3: getfarstrings = PSTR("Wed"); break;
+                case 4: getfarstrings = PSTR("Thu"); break;
+                case 5: getfarstrings = PSTR("Fri"); break;
+                case 6: getfarstrings = PSTR("Sat"); break;
+                case 7: getfarstrings = PSTR("Sun"); break;
+                default: getfarstrings = PSTR("ERR"); break;
+              }
+              strcpy_P(downame, getfarstrings);
+
+              switch (monthval)
+              {
+                case 1: getfarstrings = PSTR("Jan"); break;
+                case 2: getfarstrings = PSTR("Feb"); break;
+                case 3: getfarstrings = PSTR("Mar"); break;
+                case 4: getfarstrings = PSTR("Apr"); break;
+                case 5: getfarstrings = PSTR("May"); break;
+                case 6: getfarstrings = PSTR("Jun"); break;
+                case 7: getfarstrings = PSTR("Jul"); break;
+                case 8: getfarstrings = PSTR("Aug"); break;
+                case 9: getfarstrings = PSTR("Sep"); break;
+                case 10: getfarstrings = PSTR("Oct"); break;
+                case 11: getfarstrings = PSTR("Nov"); break;
+                case 12: getfarstrings = PSTR("Dec"); break;
+                default: getfarstrings = PSTR("ERR"); break;
+              }
+              strcpy_P(monthname, getfarstrings);
+              strcpy_P(outBuf, PSTR("Last-Modified: %s, %02d %s %d %02d:%02d:%02d GMT\n"));
+              sprintf(buffer + strlen(buffer), outBuf, downame, dayval, monthname, lastWrtYr, FAT_HOUR(d.lastWriteTime), FAT_MINUTE(d.lastWriteTime), FAT_SECOND(d.lastWriteTime));
+            }
+            strcat_P(buffer, PSTR("Cache-Control: max-age=3600, private\n\n")); //max-age=84400 = one day, max-age=2592000 = 30 days. Last string in header, double \n
+            client.print(buffer);
+
+            //HEAD request received
+            if (!(httpflags & 4)) {
+              transmitFile(dataFile);
+            }
+            strcpy_P(buffer, ((httpflags & 4)?PSTR("HEAD"):PSTR("GET"))); strcat_P(buffer, PSTR(" request received\n"));
+            DebugOutput.print(buffer);
+
+            dataFile.close();
+          }
+          else
+          {
+          // simply print the website if no index.html on SD card
+            if(!strcmp(p,"/")){
+              webPrintSite();
+              break;
+            }
+            strcpy_P(buffer, PSTR("HTTP/1.1 404 Not Found\nContent-Type: text/html\n\n<h2>File not found!</h2><br>File name: "));
+            uint16_t x = strlen(buffer);
+            urlString.toCharArray(buffer + x, BUFLEN - x);
+            client.print(buffer);
+           }
+          client.flush();
+          break;
+        }
+#endif
+
         if (p[1] != 'J') {
           client.flush();
         }
+#ifndef WEBSERVER
         // simply print the website
         if(!strcmp(p,"/")){
           webPrintSite();
           break;
         }
+#endif

         // Answer to unknown requests
-        if(!isdigit(p[1]) && strchr("ABCDEGHIJKLMNOPQRSTUVXY",p[1])==NULL){
+        if(!isdigit(p[1]) && strchr("ABCDEGHIJKLMNOPQRSTUVWXY",p[1])==NULL){
           webPrintHeader();
           webPrintFooter();
           break;
         }
+
+#ifdef WEBSERVER
+        //Send HTML pages without header and footer (For external interface)
+        if(p[1]=='W'){
+          p++;
+          httpflags |= 128;
+        }
+#endif
+
         // setting verbosity level
         if(p[1]=='V'){
           p+=2;
@@ -5207,7 +5436,7 @@
         }

         if(p[1]=='Q') {
-          webPrintHeader();
+          if(!(httpflags & 128)) webPrintHeader();

           client.print(F(MENU_TEXT_VER ": "));
           client.print(BSB_VERSION);
@@ -5388,7 +5617,7 @@

           client.println(F("<BR>" MENU_TEXT_QFE ".<BR>"));
           bus.setBusType(bus.getBusType(), myAddr, destAddr);   // return to original destination address
-          webPrintFooter();
+          if(!(httpflags & 128)) webPrintFooter();
           break;
         }

@@ -5434,14 +5663,12 @@
         }

         if (p[1]=='J') {
-          client.println(F("HTTP/1.1 200 OK"));
-          client.println(F("Content-Type: application/json; charset=utf-8"));
-          client.println();
-          client.println(F("{"));
-
+          strcpy_P(buffer, PSTR("HTTP/1.1 200 OK\nContent-Type: application/json; charset=utf-8\n\n{\n"));
+          client.print(buffer);
+          char superbuffer[512];
           int i=0;
           uint32_t cmd=0;
-
+          char formatbuf[80];
           // Parse potential JSON payload

           char json_temp[11];
@@ -5508,40 +5735,45 @@
               }

               output = false;
+              superbuffer[0] = 0;
+              int buffershiftedbycolon = 0;
               if (!been_here || (p[2]=='K' && isdigit(p[4]))) {
                 been_here = true;
               } else {
-                client.println(F(","));
+//                client.println(F(","));
+                strcpy_P(superbuffer, PSTR(","));
+                buffershiftedbycolon = strlen(superbuffer);
               }
               if (p[2]=='K' && !isdigit(p[4])) {
                 uint16_t x=2;
                 uint8_t cat=0;
-                client.print(F("\"0\": { \"name\": \""));
                 while (x<sizeof(ENUM_CAT)) {
-                  char z = pgm_read_byte_far(pgm_get_far_address(ENUM_CAT)+x);
-                  if (z == '\0') {
-                    cat_min = pgm_read_word_far(pgm_get_far_address(ENUM_CAT_NR) + (cat*2) * sizeof(ENUM_CAT_NR[0]));
-                    cat_max = pgm_read_word_far(pgm_get_far_address(ENUM_CAT_NR) + (cat*2+1) * sizeof(ENUM_CAT_NR[0]));
-                    client.print(F("\", \"min\": "));
-                    client.print(cat_min);
-                    client.print(F(", \"max\": "));
-                    client.print(cat_max);
-                    if (x < sizeof(ENUM_CAT)-1 && cat < 42) {
-                      cat++;
-                      client.println(F(" },"));
-                      client.print(F("\""));
-                      client.print(cat);
-                      client.print(F("\": { \"name\": \""));
-                      x = x + 3;
-                      continue;
-                    } else {
-                      client.print(F(" }"));
-                      json_token = NULL;
-                      break;
-                    }
+                  char z;
+                  strcpy_P(formatbuf, PSTR("\"%d\": { \"name\": \""));
+                  sprintf(superbuffer + buffershiftedbycolon, formatbuf, cat);
+                  buffershiftedbycolon = 0;
+                  char *outBufp = superbuffer + strlen(superbuffer);
+                  strcpy_PF(outBufp, pgm_get_far_address(ENUM_CAT)+x);
+                  uint16_t y = strlen(outBufp);
+                  x += y;
+                  outBufp += y;
+                  cat_min = pgm_read_word_far(pgm_get_far_address(ENUM_CAT_NR) + (cat*2) * sizeof(ENUM_CAT_NR[0]));
+                  cat_max = pgm_read_word_far(pgm_get_far_address(ENUM_CAT_NR) + (cat*2+1) * sizeof(ENUM_CAT_NR[0]));
+                  strcpy_P(formatbuf, PSTR("\", \"min\": %d, \"max\": %d },\n"));
+                  sprintf(outBufp, formatbuf, cat_min, cat_max);
+                  if (x < sizeof(ENUM_CAT)-1 && cat < 42) {
+                    cat++;
+                    x += 3;
+                    client.print(superbuffer);
+                    continue;
+                  } else {
+                    y = strlen(outBufp);
+                    outBufp[--y] = 0;//shift to last non-zero char ('\n') and clear it
+                    outBufp[--y] = 0;//shift to last non-zero char (',') and clear it
+                    client.print(superbuffer);
+                    json_token = NULL;
+                    break;
                   }
-                  client.print(z);
-                  x++;
                 }
                 json_token = NULL;
               }
@@ -5574,21 +5806,16 @@
                 uint16_t enumstr_len = get_cmdtbl_enumstr_len(i);
                 uint_farptr_t enumstr = calc_enum_offset(get_cmdtbl_enumstr(i), enumstr_len);

-                strcpy_PF(buffer, get_cmdtbl_desc(i));
-
-                if (!been_here2 || p[2] == 'Q') {
-                  been_here2=true;
-                } else {
-                  client.println(F(","));
-                }
-
-                client.print(F("  \""));
-                client.print(json_parameter);
-                client.println(F("\": {"));
-
-                client.print(F("    \"name\": \""));
-                client.print(buffer);
-                client.println(F("\","));
+                strcpy_P(formatbuf, PSTR(",\n  \"%d\": {\n    \"name\": \""));
+                if (p[2] == 'Q') buffershiftedbycolon = 0;
+                sprintf(superbuffer + buffershiftedbycolon, been_here2?formatbuf:(formatbuf + 2), json_parameter); //do not print ",\n" if it first field
+                buffershiftedbycolon = 0;
+                if (!been_here2 || p[2] == 'Q') been_here2=true;
+
+                char *bufferp = superbuffer + strlen(superbuffer);
+                strcpy_PF(bufferp, get_cmdtbl_desc(i));
+                strcat_P(bufferp, PSTR("\",\n"));
+                client.print(superbuffer);

                 uint8_t div_unit_len=0;
                 uint8_t div_data_type=0;
@@ -5652,88 +5879,106 @@
                     }
                   }

-                  client.print(F("    \"value\": \""));
-                  client.print(ret_val_str);
-                  client.println(F("\","));
-
-                  client.print(F("    \"unit\": \""));
-                  client.print(unit_str);
-                  client.println(F("\","));
-
-                  client.print(F("    \"desc\": \""));
-                  if (div_data_type == DT_ENUM) {
-                    client.print(desc_str);
-                  }
-                  client.println(F("\","));
+//                  strcpy_P(formatbuf, PSTR("    \"value\": \"%s\",\n    \"unit\": \"%s\",\n    \"desc\": \"%s\",\n"));
+//                  sprintf(outBuf, formatbuf, ret_val_str, unit_str, ((div_data_type == DT_ENUM)?desc_str:""));
+//                  client.print(outBuf);
+                  strcpy_P(formatbuf, PSTR("    \"value\": \"%s\",\n    \"unit\": \"%s\",\n    \"desc\": \""));
+                  sprintf(superbuffer, formatbuf, ret_val_str, unit_str);
+                  if(div_data_type == DT_ENUM)
+                    strcat(superbuffer,desc_str);
+                  strcat_P(superbuffer,PSTR("\",\n"));
+                  client.print(superbuffer);
                 }

                 if (p[2] != 'Q') {
-                  client.println(F("    \"possibleValues\": ["));
-                  if (enumstr_len > 0) {
-                    uint16_t x = 0;
-                    uint16_t val = 0;
-                    been_here=false;
-                    while (x < enumstr_len) {
-                      if (!been_here) {
-                        been_here = true;
-                      } else {
-                        client.println(F(","));
-                      }
-                      client.print(F("      { \"enumValue\": \""));
-                      if((byte)(pgm_read_byte_far(enumstr+x+1))!=' ' || type == VT_BIT) {         // ENUMs must not contain two consecutive spaces! Necessary because VT_BIT bitmask may be 0x20 which equals space
-                        val=uint16_t((pgm_read_byte_far(enumstr+x) << 8)) | uint16_t(pgm_read_byte_far(enumstr+x+1));
-                        x++;
-                      }else{
-                        val=uint16_t(pgm_read_byte_far(enumstr+x));
-                      }
-                      client.print(val);
-                      client.print(F("\", \"desc\": \""));
-                      //skip leading space
-                      x = x + 2;
-                      char z = pgm_read_byte_far(enumstr+x);
-                      while (z != '\0') {
-                        client.print(z);
+                  strcpy_P(formatbuf, PSTR("    \"possibleValues\": [\n"));
+                  client.print(formatbuf);
+
+                  if (type == VT_ONOFF || type == VT_YESNO) {
+                    superbuffer[0] = 0;
+                    strcat_P(superbuffer, PSTR("      { \"enumValue\": \"0\", \"desc\": \""));
+                    if (type == VT_ONOFF) {
+                      strcat_P(superbuffer, PSTR(MENU_TEXT_OFF));
+                    } else {
+                      strcat_P(superbuffer, PSTR(MENU_TEXT_NO));
+                    }
+                    strcat_P(superbuffer, PSTR("\" },\n      { \"enumValue\": \""));
+                    if (type == VT_ONOFF) {
+                      strcat_P(superbuffer, PSTR("255"));
+                    } else {
+                      strcat_P(superbuffer, PSTR("1"));
+                    }
+                    strcat_P(superbuffer, PSTR("\", \"desc\": \""));
+                    if (type == VT_ONOFF) {
+                      strcat_P(superbuffer, PSTR(MENU_TEXT_ON));
+                    } else {
+                      strcat_P(superbuffer, PSTR(MENU_TEXT_YES));
+                    }
+                    strcat_P(superbuffer, PSTR("\" }"));
+                    client.print(superbuffer);
+                  } else {
+                    if (enumstr_len > 0) {
+                      uint16_t x = 0;
+                      uint16_t val = 0;
+                      been_here=false;
+                      while (x < enumstr_len) {
+                        if((byte)(pgm_read_byte_far(enumstr+x+1))!=' ' || type == VT_BIT) {         // ENUMs must not contain two consecutive spaces! Necessary because VT_BIT bitmask may be 0x20 which equals space
+                          val=uint16_t((pgm_read_byte_far(enumstr+x) << 8)) | uint16_t(pgm_read_byte_far(enumstr+x+1));
+                          x++;
+                        }else{
+                          val=uint16_t(pgm_read_byte_far(enumstr+x));
+                        }
+                        strcpy_P(formatbuf, PSTR(",\n      { \"enumValue\": \"%d\", \"desc\": \""));
+                        sprintf(superbuffer, been_here?formatbuf:(formatbuf + 2), val); //do not print ",\n" if it first enumValue
+                        if (!been_here) been_here = true;
+                        client.print(superbuffer);
+                        //skip leading space
+                        x = x + 2;
+//                        strcpy_PF(buffer, pgm_get_far_address(enumstr)+x);
+                        char z = pgm_read_byte_far(enumstr+x);
+                        char *outB = superbuffer;
+                        while (z != '\0') {
+                            outB[0] = z;
+                            outB++;
+                          x++;
+                          z = pgm_read_byte_far(enumstr+x);
+                        }
+                        outB[0] = 0;
+//                        x += strlen(buffer);
+                        strcat_P(superbuffer, PSTR("\" }"));
+                        client.print(superbuffer);
                         x++;
-                        z = pgm_read_byte_far(enumstr+x);
                       }
-                      client.print(F("\" }"));
-                      x++;
                     }
                   }
-                  client.println();
-                  client.println(F("    ],"));
+                  //client.println();
+                  strcpy_P(formatbuf, PSTR("\n    ],\n"));
+                  client.print(formatbuf);
                 }

-                client.print(F("    \"dataType\": "));
-                client.print(div_data_type);
-                client.println();
-
-                client.print(F("  }"));
+                strcpy_P(formatbuf, PSTR("    \"dataType\": %d\n  }"));
+                sprintf(superbuffer, formatbuf, div_data_type);
+                client.print(superbuffer);
               }

               if (p[2]=='S') {
-                DebugOutput.print(F("Setting parameter "));
-                DebugOutput.print(json_parameter);
-                DebugOutput.print(F(" to "));
-                DebugOutput.print(json_value_string);
-                DebugOutput.print(F(" with type "));
-                DebugOutput.println(json_type);
                 int status = set(json_parameter, json_value_string, json_type);
-                client.print(F("  \""));
-                client.print(json_parameter);
-                client.println(F("\": {"));
-                client.print(F("    \"status\": "));
-                client.print(status);
-                client.println();
-                client.print(F("  }"));
+                strcpy_P(formatbuf, PSTR("  \"%s\": {\n    \"status\": %d\n  }"));
+                sprintf(superbuffer + buffershiftedbycolon, formatbuf, json_parameter, status);
+                buffershiftedbycolon = 0;
+                client.print(superbuffer);
+
+                strcpy_P(formatbuf, PSTR("Setting parameter %s to %s with type %s\n"));
+                sprintf(superbuffer, formatbuf, json_parameter, json_value_string, json_type);
+                DebugOutput.print(superbuffer);
               }
               if (json_token != NULL && ((p[2] != 'K' && !isdigit(p[4])) || p[2] == 'Q')) {
                 json_token = strtok(NULL,",");
               }
             }
           }
-          client.println();
-          client.println(F("}"));
+          strcpy_P(formatbuf, PSTR("\n}\n"));
+          client.print(formatbuf);
           client.flush();
           break;
         }
@@ -5753,6 +5998,7 @@
               client.println(F(MENU_TEXT_DTF));
             }
             webPrintFooter();
+#if !defined WEBSERVER && !defined USEEXTERNALINTERFACE
           } else if (p[2]=='G') {
             webPrintHeader();
            client.println(F("<A HREF='D'>" MENU_TEXT_DTD "</A><div align=center></div>"));
@@ -5772,17 +6018,7 @@
             if (dataFile) {

               unsigned long startdump = millis();
-              int logbuflen = 512;
-              byte loglineBuf[logbuflen];
-              int chars_read = 0;
-
-              chars_read = dataFile.read(&loglineBuf , logbuflen);
-              while (chars_read == logbuflen) {
-                client.write(loglineBuf,logbuflen);
-                chars_read = dataFile.read(&loglineBuf , logbuflen);
-              }
-              //final packet
-              if (chars_read > 0) client.write(loglineBuf, chars_read);
+              transmitFile(dataFile);
               dataFile.close();

               DebugOutput.print(F("Duration: "));
@@ -5790,12 +6026,13 @@
             } else {
               client.println(F(MENU_TEXT_DTO));
             }
+#endif
           }
           break;
         }
 #endif
         if (p[1]=='C'){ // dump configuration
-          webPrintHeader();
+          if(!(httpflags & 128)) webPrintHeader();
           client.println(F(MENU_TEXT_CFG "<BR><BR>"));
 //          client.println(F("BSB pins: "));
 //          client.println(bus);
@@ -5960,7 +6197,7 @@
           #endif

           client.println(F("<BR>"));
-          webPrintFooter();
+          if(!(httpflags & 128)) webPrintFooter();

 #if defined(__AVR__)
           DebugOutput.println(F("EEPROM dump:"));
@@ -7053,7 +7290,7 @@
     }
   }

-#ifdef LOGGER
+#if defined LOGGER || defined WEBSERVER
   // disable w5100 while setting up SD
   pinMode(10,OUTPUT);
   digitalWrite(10,HIGH);
